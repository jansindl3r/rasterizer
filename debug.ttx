<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.22">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="A"/>
    <GlyphID id="2" name="V"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="0.001"/>
    <checkSumAdjustment value="0xc653484d"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00000000 00001011"/>
    <unitsPerEm value="1000"/>
    <created value="Mon Feb 15 10:12:51 2021"/>
    <modified value="Wed May 12 18:26:08 2021"/>
    <xMin value="0"/>
    <yMin value="12"/>
    <xMax value="754"/>
    <yMax value="766"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="6"/>
    <fontDirectionHint value="2"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="778"/>
    <descent value="-222"/>
    <lineGap value="0"/>
    <advanceWidthMax value="802"/>
    <minLeftSideBearing value="0"/>
    <minRightSideBearing value="0"/>
    <xMaxExtent value="754"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="3"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="3"/>
    <maxPoints value="88"/>
    <maxContours value="2"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="154"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="443"/>
    <maxSizeOfInstructions value="3971"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="4"/>
    <xAvgCharWidth value="562"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00000100"/>
    <ySubscriptXSize value="650"/>
    <ySubscriptYSize value="600"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="75"/>
    <ySuperscriptXSize value="650"/>
    <ySuperscriptYSize value="600"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="350"/>
    <yStrikeoutSize value="50"/>
    <yStrikeoutPosition value="334"/>
    <sFamilyClass value="0"/>
    <panose>
      <bFamilyType value="0"/>
      <bSerifStyle value="0"/>
      <bWeight value="0"/>
      <bProportion value="0"/>
      <bContrast value="0"/>
      <bStrokeVariation value="0"/>
      <bArmStyle value="0"/>
      <bLetterForm value="0"/>
      <bMidline value="0"/>
      <bXHeight value="0"/>
    </panose>
    <ulUnicodeRange1 value="00000000 00000000 00000000 00000001"/>
    <ulUnicodeRange2 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00000000"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="NONE"/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="65"/>
    <usLastCharIndex value="86"/>
    <sTypoAscender value="778"/>
    <sTypoDescender value="-222"/>
    <sTypoLineGap value="200"/>
    <usWinAscent value="978"/>
    <usWinDescent value="222"/>
    <ulCodePageRange1 value="00000000 00000000 00000000 00000001"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="556"/>
    <sCapHeight value="778"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="486" lsb="0"/>
    <mtx name="A" width="802" lsb="49"/>
    <mtx name="V" width="656" lsb="0"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0x56" name="V"/><!-- LATIN CAPITAL LETTER V -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0x41" name="A"/><!-- LATIN CAPITAL LETTER A -->
      <map code="0x56" name="V"/><!-- LATIN CAPITAL LETTER V -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 74 values pushed */
      153 152 151 150 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115
      114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90
      89 88 87 86 85 84 83 81 80 79 78 77 76 75 74 73 72 71 70 40 31 16 10 9
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        11 10
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        10 11
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        7
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        6
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          70
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          71
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          72
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          73
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 3
          CINDEX[ ]	/* CopyXToTopStack */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            5
            RS[ ]	/* ReadStore */
            MAX[ ]	/* Maximum */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          79
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        98
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SWAP[ ]	/* SwapTopStack */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        8 0
        GPV[ ]	/* GetPVector */
        POP[ ]	/* PopTopStack */
        EQ[ ]	/* Equal */
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        12 0
        GPV[ ]	/* GetPVector */
        POP[ ]	/* PopTopStack */
        EQ[ ]	/* Equal */
        ADD[ ]	/* Add */
        RS[ ]	/* ReadStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        DUP[ ]	/* DuplicateTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        DIV[ ]	/* Divide */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        EVEN[ ]	/* Even */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        256
        DIV[ ]	/* Divide */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        EVEN[ ]	/* Even */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          32
          ADD[ ]	/* Add */
          FLOOR[ ]	/* Floor */
        EIF[ ]	/* EndIf */
        SCFS[ ]	/* SetCoordFromStackFP */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        PUSHW[ ]	/* 1 value pushed */
        53
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          SWAP[ ]	/* SwapTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            ROLL[ ]	/* RollTopThreeStack */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            POP[ ]	/* PopTopStack */
            DUP[ ]	/* DuplicateTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHW[ ]	/* 1 value pushed */
        -63
        JMPR[ ]	/* Jump */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        35 1
        GETINFO[ ]	/* GetInfo */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 1
        GETINFO[ ]	/* GetInfo */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          4096 32
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            2 1 2
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          36 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            8192 64
            GETINFO[ ]	/* GetInfo */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              2 2 2
              RS[ ]	/* ReadStore */
              ADD[ ]	/* Add */
              WS[ ]	/* WriteStore */
              PUSHB[ ]	/* 2 values pushed */
              36 1
              GETINFO[ ]	/* GetInfo */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                2 32 2
                RS[ ]	/* ReadStore */
                ADD[ ]	/* Add */
                WS[ ]	/* WriteStore */
                SVTCA[0]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                SVTCA[1]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 4 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                256
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 256
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                512
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 16 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 2 values pushed */
                38 1
                GETINFO[ ]	/* GetInfo */
                LTEQ[ ]	/* LessThenOrEqual */
                IF[ ]	/* If */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 512
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  1024
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 64 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 1024
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  2048
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 128 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHB[ ]	/* 2 values pushed */
                  40 1
                  GETINFO[ ]	/* GetInfo */
                  LTEQ[ ]	/* LessThenOrEqual */
                  IF[ ]	/* If */
                    PUSHW[ ]	/* 2 values pushed */
                    16384 2048
                    MUL[ ]	/* Multiply */
                    PUSHW[ ]	/* 1 value pushed */
                    4096
                    GETINFO[ ]	/* GetInfo */
                    EQ[ ]	/* Equal */
                    IF[ ]	/* If */
                      PUSHW[ ]	/* 3 values pushed */
                      2 256 2
                      RS[ ]	/* ReadStore */
                      ADD[ ]	/* Add */
                      WS[ ]	/* WriteStore */
                    EIF[ ]	/* EndIf */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          NPUSHB[ ]	/* 10 values pushed */
          5 64 8 64 9 64 12 2 13 2
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 2
          RS[ ]	/* ReadStore */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            5 64 8
            PUSHW[ ]	/* 3 values pushed */
            256 9 256
            PUSHB[ ]	/* 4 values pushed */
            12 1 13 1
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            128 2
            RS[ ]	/* ReadStore */
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 1 value pushed */
              384
              PUSHB[ ]	/* 2 values pushed */
              9 64
            ELSE[ ]	/* Else */
              PUSHW[ ]	/* 2 values pushed */
              256 2
              RS[ ]	/* ReadStore */
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                5 64 8
                PUSHW[ ]	/* 3 values pushed */
                384 9 320
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                384 2
                RS[ ]	/* ReadStore */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  5 64 8
                  PUSHW[ ]	/* 1 value pushed */
                  512
                  PUSHB[ ]	/* 2 values pushed */
                  9 64
                ELSE[ ]	/* Else */
                  PUSHB[ ]	/* 3 values pushed */
                  5 64 8
                  PUSHW[ ]	/* 3 values pushed */
                  256 9 256
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
            PUSHW[ ]	/* 2 values pushed */
            16384 128
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            PUSHW[ ]	/* 2 values pushed */
            16384 512
            MUL[ ]	/* Multiply */
            PUSHW[ ]	/* 1 value pushed */
            1024
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 2 values pushed */
            1 78
            CALL[ ]	/* CallFunction */
            ADD[ ]	/* Add */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ABS[ ]	/* Absolute */
            ROLL[ ]	/* RollTopThreeStack */
            MUL[ ]	/* Multiply */
            PUSHB[ ]	/* 1 value pushed */
            64
            GTEQ[ ]	/* GreaterThanOrEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 2 values pushed */
              2 78
              CALL[ ]	/* CallFunction */
              ADD[ ]	/* Add */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          NEG[ ]	/* Negate */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        20 20
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        16 16
        RS[ ]	/* ReadStore */
        MPPEM[ ]	/* MeasurePixelPerEm */
        ROLL[ ]	/* RollTopThreeStack */
        RS[ ]	/* ReadStore */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          64
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          79
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 2 values pushed */
        97 6
        MINDEX[ ]	/* MoveXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          RS[ ]	/* ReadStore */
          MAX[ ]	/* Maximum */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        79
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        98
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        2 3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 2 values pushed */
        1 4
        CINDEX[ ]	/* CopyXToTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        MIAP[0]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        2 3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 2 values pushed */
        1 4
        CINDEX[ ]	/* CopyXToTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        MIAP[1]	/* MoveIndirectAbsPt */
        SVTCA[0]	/* SetFPVectorToAxis */
        MIAP[1]	/* MoveIndirectAbsPt */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        SPVTL[0]	/* SetPVectorToLine */
        GPV[ ]	/* GetPVector */
        PUSHB[ ]	/* 1 value pushed */
        6
        SWAP[ ]	/* SwapTopStack */
        NEG[ ]	/* Negate */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        7
        SWAP[ ]	/* SwapTopStack */
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          DUP[ ]	/* DuplicateTopStack */
          RTG[ ]	/* RoundToGrid */
          ROUND[01]	/* Round */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          SWAP[ ]	/* SwapTopStack */
          DIV[ ]	/* Divide */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            CEILING[ ]	/* Ceiling */
          ELSE[ ]	/* Else */
            FLOOR[ ]	/* Floor */
          EIF[ ]	/* EndIf */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          32
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          64
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          4
          SWAP[ ]	/* SwapTopStack */
          WS[ ]	/* WriteStore */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          4 0
          WS[ ]	/* WriteStore */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 2 values pushed */
        0 78
        CALL[ ]	/* CallFunction */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        LT[ ]	/* LessThan */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 2 values pushed */
          64 4
          MINDEX[ ]	/* MoveXToTopStack */
          SUB[ ]	/* Subtract */
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 2 values pushed */
          1 78
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        LT[ ]	/* LessThan */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          MUL[ ]	/* Multiply */
          ADD[ ]	/* Add */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          RCVT[ ]	/* ReadCVT */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        AND[ ]	/* LogicalAnd */
        PUSHB[ ]	/* 2 values pushed */
        64 79
        CALL[ ]	/* CallFunction */
        EQ[ ]	/* Equal */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            64 64
            ROLL[ ]	/* RollTopThreeStack */
            SUB[ ]	/* Subtract */
            DUP[ ]	/* DuplicateTopStack */
            MUL[ ]	/* Multiply */
            SUB[ ]	/* Subtract */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            MUL[ ]	/* Multiply */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
        EIF[ ]	/* EndIf */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SFVTCA[1]	/* SetFVectorToAxis */
        PUSHB[ ]	/* 2 values pushed */
        11 10
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        NEG[ ]	/* Negate */
        SPVFS[ ]	/* SetPVectorFromStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        10 11
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        RS[ ]	/* ReadStore */
        SFVFS[ ]	/* SetFVectorFromStack */
        SPVTCA[0]	/* SetPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        CEILING[ ]	/* Ceiling */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        FLOOR[ ]	/* Floor */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        8192
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[1]	/* MeasureDistance */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MD[1]	/* MeasureDistance */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        3
        RS[ ]	/* ReadStore */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          NEG[ ]	/* Negate */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 2 values pushed */
        1 78
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        103
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        104
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        128
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        128
        MUL[ ]	/* Multiply */
        DUP[ ]	/* DuplicateTopStack */
        IF[ ]	/* If */
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        110
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          128
          LT[ ]	/* LessThan */
          DUP[ ]	/* DuplicateTopStack */
          ADD[ ]	/* Add */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        ADD[ ]	/* Add */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            DUP[ ]	/* DuplicateTopStack */
            FLOOR[ ]	/* Floor */
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 1 value pushed */
            64
            SWAP[ ]	/* SwapTopStack */
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 2 values pushed */
            0 3
            CINDEX[ ]	/* CopyXToTopStack */
            LT[ ]	/* LessThan */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            LT[ ]	/* LessThan */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              PUSHB[ ]	/* 1 value pushed */
              3
              CINDEX[ ]	/* CopyXToTopStack */
              SUB[ ]	/* Subtract */
              ROLL[ ]	/* RollTopThreeStack */
              GTEQ[ ]	/* GreaterThanOrEqual */
              IF[ ]	/* If */
                POP[ ]	/* PopTopStack */
                PUSHB[ ]	/* 1 value pushed */
                0
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            7
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              DUP[ ]	/* DuplicateTopStack */
              FLOOR[ ]	/* Floor */
              SUB[ ]	/* Subtract */
              NEG[ ]	/* Negate */
              SWAP[ ]	/* SwapTopStack */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              0
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        2 78
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        0
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          1
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        FLOOR[ ]	/* Floor */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        112
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        32
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        FLOOR[ ]	/* Floor */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          RCVT[ ]	/* ReadCVT */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        SUB[ ]	/* Subtract */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        512
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        PUSHW[ ]	/* 1 value pushed */
        512
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        SUB[ ]	/* Subtract */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        93
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        SRP1[ ]	/* SetRefPoint1 */
        ROLL[ ]	/* RollTopThreeStack */
        SRP2[ ]	/* SetRefPoint2 */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        IP[ ]	/* InterpolatePts */
        ROLL[ ]	/* RollTopThreeStack */
        IF[ ]	/* If */
          PUSHW[ ]	/* 3 values pushed */
          93 4096 4
          MINDEX[ ]	/* MoveXToTopStack */
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          ADD[ ]	/* Add */
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
        ELSE[ ]	/* Else */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 2 values pushed */
          2 78
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        MSIRP[1]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 9
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 2 values pushed */
        93 7
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        111
        CALL[ ]	/* CallFunction */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 8
        MINDEX[ ]	/* MoveXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          80
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          113
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          GT[ ]	/* GreaterThan */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            6
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            5
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              0
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                DUP[ ]	/* DuplicateTopStack */
                PUSHB[ ]	/* 1 value pushed */
                2
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  7
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  7
                  CINDEX[ ]	/* CopyXToTopStack */
                  MD[0]	/* MeasureDistance */
                  PUSHB[ ]	/* 1 value pushed */
                  2
                  SLOOP[ ]	/* SetLoopVariable */
                  SHPIX[ ]	/* ShiftZoneByPixel */
                ELSE[ ]	/* Else */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  4
                  CINDEX[ ]	/* CopyXToTopStack */
                  PUSHB[ ]	/* 1 value pushed */
                  6
                  CINDEX[ ]	/* CopyXToTopStack */
                  MD[0]	/* MeasureDistance */
                  PUSHB[ ]	/* 1 value pushed */
                  2
                  SLOOP[ ]	/* SetLoopVariable */
                  SHPIX[ ]	/* ShiftZoneByPixel */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHW[ ]	/* 3 values pushed */
        93 4096 11
        CINDEX[ ]	/* CopyXToTopStack */
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        110
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        109
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        80
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        113
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        113
        CALL[ ]	/* CallFunction */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        NEG[ ]	/* Negate */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        64
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          SUB[ ]	/* Subtract */
          SWAP[ ]	/* SwapTopStack */
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 1 value pushed */
          -64
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            SWAP[ ]	/* SwapTopStack */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            SWAP[ ]	/* SwapTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          64
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            0
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              11
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              11
              CINDEX[ ]	/* CopyXToTopStack */
              MD[0]	/* MeasureDistance */
              PUSHB[ ]	/* 1 value pushed */
              4
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              6
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              10
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              10
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              7
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              113
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              4
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              5
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              7
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              5
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              113
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              2
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHB[ ]	/* 1 value pushed */
              4
              CINDEX[ ]	/* CopyXToTopStack */
              PUSHW[ ]	/* 2 values pushed */
              -64 2
              SLOOP[ ]	/* SetLoopVariable */
              SHPIX[ ]	/* ShiftZoneByPixel */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          101
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SPVTL[0]	/* SetPVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MUL[ ]	/* Multiply */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SPVTL[1]	/* SetPVectorToLine */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          MUL[ ]	/* Multiply */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          83
          CALL[ ]	/* CallFunction */
          ROLL[ ]	/* RollTopThreeStack */
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          SDPVTL[1]	/* SetDualPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MD[1]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          0
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            NEG[ ]	/* Negate */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SVTCA[0]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          SVTCA[0]	/* SetFPVectorToAxis */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZPS[ ]	/* SetZonePointerS */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[1]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          0
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[0]	/* SetFPVectorToAxis */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          PUSHB[ ]	/* 1 value pushed */
          2
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SVTCA[1]	/* SetFPVectorToAxis */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          PUSHB[ ]	/* 1 value pushed */
          2
          SWAP[ ]	/* SwapTopStack */
          SCFS[ ]	/* SetCoordFromStackFP */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 3 values pushed */
          2 0 1
          SFVTL[0]	/* SetFVectorToLine */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 3 values pushed */
          2 0 1
          SFVTL[1]	/* SetFVectorToLine */
          SWAP[ ]	/* SwapTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 2 values pushed */
          2 1
          SPVTL[1]	/* SetPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          1
          SZPS[ ]	/* SetZonePointerS */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        GFV[ ]	/* GetFVector */
        GPV[ ]	/* GetPVector */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        ADD[ ]	/* Add */
        ABS[ ]	/* Absolute */
        PUSHW[ ]	/* 2 values pushed */
        16384 1024
        MUL[ ]	/* Multiply */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          0
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[1]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[0]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        118
        CALL[ ]	/* CallFunction */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        119
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SPVTCA[1]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[1]	/* MeasureDistance */
        SPVTCA[0]	/* SetPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        MD[1]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        MUL[ ]	/* Multiply */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        93 14
        CINDEX[ ]	/* CopyXToTopStack */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        12
        MINDEX[ ]	/* MoveXToTopStack */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        IP[ ]	/* InterpolatePts */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        IP[ ]	/* InterpolatePts */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        124
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        11
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        124
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          SDPVTL[1]	/* SetDualPVectorToLine */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          9
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00001]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          6
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00001]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          11
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHW[ ]	/* 2 values pushed */
          -1 118
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          119
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHW[ ]	/* 2 values pushed */
          -1 118
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SFVFS[ ]	/* SetFVectorFromStack */
          PUSHB[ ]	/* 1 value pushed */
          10
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          7
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          119
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        12
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        9
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        32
        MUL[ ]	/* Multiply */
        PUSHB[ ]	/* 2 values pushed */
        1 12
        CINDEX[ ]	/* CopyXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[0]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[1]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        10
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        ROLL[ ]	/* RollTopThreeStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 2 values pushed */
        1 7
        MINDEX[ ]	/* MoveXToTopStack */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SFVTCA[0]	/* SetFVectorToAxis */
        ELSE[ ]	/* Else */
          SFVTCA[1]	/* SetFVectorToAxis */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        5
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVFS[ ]	/* SetFVectorFromStack */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SFVTL[0]	/* SetFVectorToLine */
        PUSHB[ ]	/* 1 value pushed */
        1
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 2 values pushed */
          0 16384
        ELSE[ ]	/* Else */
          PUSHW[ ]	/* 2 values pushed */
          16384 0
        EIF[ ]	/* EndIf */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
        PUSHB[ ]	/* 1 value pushed */
        125
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SVTCA[1]	/* SetFPVectorToAxis */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        SVTCA[0]	/* SetFPVectorToAxis */
        GC[0]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        10
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        11
        RS[ ]	/* ReadStore */
        ROLL[ ]	/* RollTopThreeStack */
        MUL[ ]	/* Multiply */
        SWAP[ ]	/* SwapTopStack */
        DIV[ ]	/* Divide */
        SUB[ ]	/* Subtract */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        MDAP[0]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        RDTG[ ]	/* RoundDownToGrid */
        MDRP[00101]	/* MoveDirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          106
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          108
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        8
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        10
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        111
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        6
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          102
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          102
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          104
        EIF[ ]	/* EndIf */
        CALL[ ]	/* CallFunction */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00101]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          1
          CINDEX[ ]	/* CopyXToTopStack */
          MDRP[00101]	/* MoveDirectRelPt */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          5
          MINDEX[ ]	/* MoveXToTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          6
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          111
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          130
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          130
          CALL[ ]	/* CallFunction */
          DUP[ ]	/* DuplicateTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          4
          RS[ ]	/* ReadStore */
          SVTCA[1]	/* SetFPVectorToAxis */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          96
          ADD[ ]	/* Add */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          32
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          8
          MINDEX[ ]	/* MoveXToTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          ROLL[ ]	/* RollTopThreeStack */
          ROLL[ ]	/* RollTopThreeStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[01]	/* Round */
          SUB[ ]	/* Subtract */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          2
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        PUSHB[ ]	/* 2 values pushed */
        1 2
        RS[ ]	/* ReadStore */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          SVTCA[1]	/* SetFPVectorToAxis */
          ALIGNRP[ ]	/* AlignRelativePt */
          SVTCA[0]	/* SetFPVectorToAxis */
          ALIGNRP[ ]	/* AlignRelativePt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          IF[ ]	/* If */
            ALIGNRP[ ]	/* AlignRelativePt */
          ELSE[ ]	/* Else */
            IP[ ]	/* InterpolatePts */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          PUSHW[ ]	/* 1 value pushed */
          -23
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        EQ[ ]	/* Equal */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[1]	/* GetCoordOnPVector */
        EQ[ ]	/* Equal */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP2[ ]	/* SetRefPoint2 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        6
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        133
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          SPVTCA[0]	/* SetPVectorToAxis */
          ROLL[ ]	/* RollTopThreeStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SPVFS[ ]	/* SetPVectorFromStack */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            SPVFS[ ]	/* SetPVectorFromStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        152
        CALL[ ]	/* CallFunction */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          SPVTCA[0]	/* SetPVectorToAxis */
          ROLL[ ]	/* RollTopThreeStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          PUSHB[ ]	/* 1 value pushed */
          4
          MINDEX[ ]	/* MoveXToTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SPVFS[ ]	/* SetPVectorFromStack */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            SPVFS[ ]	/* SetPVectorFromStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        95
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        86
        SWAP[ ]	/* SwapTopStack */
        JROF[ ]	/* JumpRelativeOnFalse */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 71
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 2 values pushed */
            1 44
            JMPR[ ]	/* Jump */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 27
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 2 values pushed */
          0 12
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -77
        JMPR[ ]	/* Jump */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        1
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        123
        SWAP[ ]	/* SwapTopStack */
        JROT[ ]	/* JumpRelativeOnTrue */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        PUSHB[ ]	/* 1 value pushed */
        114
        SWAP[ ]	/* SwapTopStack */
        JROF[ ]	/* JumpRelativeOnFalse */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        32
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          99
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHW[ ]	/* 1 value pushed */
        4096
        MUL[ ]	/* Multiply */
        ODD[ ]	/* Odd */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          ODD[ ]	/* Odd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            OR[ ]	/* LogicalOr */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            4
            MINDEX[ ]	/* MoveXToTopStack */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 2 values pushed */
            54 0
            SWAP[ ]	/* SwapTopStack */
            JMPR[ ]	/* Jump */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          NOT[ ]	/* LogicalNot */
          ROLL[ ]	/* RollTopThreeStack */
          AND[ ]	/* LogicalAnd */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          29
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        DIV[ ]	/* Divide */
        DUP[ ]	/* DuplicateTopStack */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          14
          JMPR[ ]	/* Jump */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        4
        MINDEX[ ]	/* MoveXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -104
        JMPR[ ]	/* Jump */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      NPUSHB[ ]	/* 186 values pushed */
      151 150 19 31 128 150 144 150 2 48 150 1 166 164 50 31 165 163 50 31 164 143 50 31 163
      142 50 31 161 141 50 31 160 140 50 31 143 141 20 31 142 140 14 31 140 139 12 31 118 110
      41 31 116 114 100 31 114 67 41 31 112 110 100 31 110 66 27 31 105 97 41 31 103 101 100
      31 101 67 41 31 99 97 100 31 97 66 27 31 87 83 100 31 85 81 100 31 83 81 70 31
      76 68 41 31 74 72 100 31 72 68 72 31 70 68 100 31 68 66 27 31 67 65 17 31 66
      65 17 31 18 89 16 89 13 50 12 85 5 50 4 85 12 89 4 89 15 50 14 85 11 50
      10 85 7 50 6 85 1 50 0 85 14 89 10 89 6 89 48 6 1 0 89 9 50 8 85
      3 50 2 85 8 89 2 89 16 0 3
      PUSHW[ ]	/* 6 values pushed */
      256 256 5 1 406 84
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      2047
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      7
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      37
      GTEQ[ ]	/* GreaterThanOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      1
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      64
      LTEQ[ ]	/* LessThenOrEqual */
      AND[ ]	/* LogicalAnd */
      PUSHB[ ]	/* 1 value pushed */
      6
      GETINFO[ ]	/* GetInfo */
      PUSHB[ ]	/* 1 value pushed */
      0
      NEQ[ ]	/* NotEqual */
      AND[ ]	/* LogicalAnd */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      SCANCTRL[ ]	/* ScanConversionControl */
      SCANTYPE[ ]	/* ScanType */
      SCANTYPE[ ]	/* ScanType */
      SVTCA[0]	/* SetFPVectorToAxis */
      SCVTCI[ ]	/* SetCVTCutIn */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      29
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 3 values pushed */
        3 160 160
        SCVTCI[ ]	/* SetCVTCutIn */
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      70
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 3 values pushed */
        3 64 64
        SCVTCI[ ]	/* SetCVTCutIn */
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      150
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 3 values pushed */
        3 0 0
        SCVTCI[ ]	/* SetCVTCutIn */
        WS[ ]	/* WriteStore */
      EIF[ ]	/* EndIf */
      WS[ ]	/* WriteStore */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      RTG[ ]	/* RoundToGrid */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="778"/>
    <cv index="1" value="12"/>
    <cv index="2" value="778"/>
    <cv index="3" value="0"/>
    <cv index="4" value="0"/>
    <cv index="5" value="0"/>
    <cv index="6" value="556"/>
    <cv index="7" value="12"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="0"/>
    <cv index="11" value="-12"/>
    <cv index="12" value="0"/>
    <cv index="13" value="0"/>
    <cv index="14" value="-222"/>
    <cv index="15" value="-12"/>
    <cv index="16" value="0"/>
    <cv index="17" value="0"/>
    <cv index="18" value="0"/>
    <cv index="19" value="0"/>
    <cv index="20" value="0"/>
    <cv index="21" value="0"/>
    <cv index="22" value="0"/>
    <cv index="23" value="0"/>
    <cv index="24" value="0"/>
    <cv index="25" value="0"/>
    <cv index="26" value="0"/>
    <cv index="27" value="0"/>
    <cv index="28" value="0"/>
    <cv index="29" value="0"/>
    <cv index="30" value="0"/>
    <cv index="31" value="0"/>
    <cv index="32" value="0"/>
    <cv index="33" value="0"/>
    <cv index="34" value="0"/>
    <cv index="35" value="0"/>
    <cv index="36" value="0"/>
    <cv index="37" value="0"/>
    <cv index="38" value="0"/>
    <cv index="39" value="0"/>
    <cv index="40" value="0"/>
    <cv index="41" value="0"/>
    <cv index="42" value="0"/>
    <cv index="43" value="0"/>
    <cv index="44" value="0"/>
    <cv index="45" value="0"/>
    <cv index="46" value="0"/>
    <cv index="47" value="0"/>
    <cv index="48" value="0"/>
    <cv index="49" value="0"/>
    <cv index="50" value="0"/>
    <cv index="51" value="0"/>
    <cv index="52" value="0"/>
    <cv index="53" value="0"/>
    <cv index="54" value="0"/>
    <cv index="55" value="0"/>
    <cv index="56" value="0"/>
    <cv index="57" value="0"/>
    <cv index="58" value="0"/>
    <cv index="59" value="0"/>
    <cv index="60" value="0"/>
    <cv index="61" value="0"/>
    <cv index="62" value="0"/>
    <cv index="63" value="0"/>
    <cv index="64" value="0"/>
    <cv index="65" value="96"/>
    <cv index="66" value="96"/>
    <cv index="67" value="89"/>
    <cv index="68" value="100"/>
    <cv index="69" value="0"/>
    <cv index="70" value="102"/>
    <cv index="71" value="0"/>
    <cv index="72" value="92"/>
    <cv index="73" value="0"/>
    <cv index="74" value="92"/>
    <cv index="75" value="0"/>
    <cv index="76" value="0"/>
    <cv index="77" value="0"/>
    <cv index="78" value="0"/>
    <cv index="79" value="0"/>
    <cv index="80" value="0"/>
    <cv index="81" value="96"/>
    <cv index="82" value="0"/>
    <cv index="83" value="96"/>
    <cv index="84" value="0"/>
    <cv index="85" value="89"/>
    <cv index="86" value="0"/>
    <cv index="87" value="89"/>
    <cv index="88" value="0"/>
    <cv index="89" value="96"/>
    <cv index="90" value="0"/>
    <cv index="91" value="90"/>
    <cv index="92" value="120"/>
    <cv index="93" value="0"/>
    <cv index="94" value="0"/>
    <cv index="95" value="0"/>
    <cv index="96" value="0"/>
    <cv index="97" value="0"/>
    <cv index="98" value="0"/>
    <cv index="99" value="0"/>
    <cv index="100" value="0"/>
    <cv index="101" value="0"/>
    <cv index="102" value="0"/>
    <cv index="103" value="0"/>
    <cv index="104" value="0"/>
    <cv index="105" value="0"/>
    <cv index="106" value="0"/>
    <cv index="107" value="0"/>
    <cv index="108" value="0"/>
    <cv index="109" value="0"/>
    <cv index="110" value="0"/>
    <cv index="111" value="0"/>
    <cv index="112" value="0"/>
    <cv index="113" value="0"/>
    <cv index="114" value="0"/>
    <cv index="115" value="0"/>
    <cv index="116" value="0"/>
    <cv index="117" value="0"/>
    <cv index="118" value="0"/>
    <cv index="119" value="0"/>
    <cv index="120" value="0"/>
    <cv index="121" value="0"/>
    <cv index="122" value="0"/>
    <cv index="123" value="0"/>
    <cv index="124" value="0"/>
    <cv index="125" value="0"/>
    <cv index="126" value="0"/>
    <cv index="127" value="0"/>
    <cv index="128" value="0"/>
    <cv index="129" value="0"/>
    <cv index="130" value="0"/>
    <cv index="131" value="0"/>
    <cv index="132" value="0"/>
    <cv index="133" value="0"/>
    <cv index="134" value="0"/>
    <cv index="135" value="0"/>
    <cv index="136" value="0"/>
    <cv index="137" value="0"/>
    <cv index="138" value="0"/>
    <cv index="139" value="0"/>
    <cv index="140" value="60"/>
    <cv index="141" value="60"/>
    <cv index="142" value="48"/>
    <cv index="143" value="48"/>
    <cv index="144" value="0"/>
    <cv index="145" value="0"/>
    <cv index="146" value="0"/>
    <cv index="147" value="0"/>
    <cv index="148" value="0"/>
    <cv index="149" value="0"/>
    <cv index="150" value="324"/>
    <cv index="151" value="300"/>
    <cv index="152" value="0"/>
    <cv index="153" value="0"/>
    <cv index="154" value="0"/>
    <cv index="155" value="0"/>
    <cv index="156" value="0"/>
    <cv index="157" value="0"/>
    <cv index="158" value="0"/>
    <cv index="159" value="0"/>
    <cv index="160" value="60"/>
    <cv index="161" value="60"/>
    <cv index="162" value="0"/>
    <cv index="163" value="48"/>
    <cv index="164" value="48"/>
    <cv index="165" value="24"/>
    <cv index="166" value="24"/>
    <cv index="167" value="0"/>
    <cv index="168" value="0"/>
    <cv index="169" value="0"/>
    <cv index="170" value="0"/>
    <cv index="171" value="0"/>
    <cv index="172" value="0"/>
    <cv index="173" value="0"/>
    <cv index="174" value="0"/>
    <cv index="175" value="0"/>
    <cv index="176" value="0"/>
    <cv index="177" value="0"/>
    <cv index="178" value="0"/>
    <cv index="179" value="0"/>
    <cv index="180" value="0"/>
    <cv index="181" value="0"/>
    <cv index="182" value="0"/>
    <cv index="183" value="0"/>
    <cv index="184" value="0"/>
    <cv index="185" value="0"/>
    <cv index="186" value="0"/>
    <cv index="187" value="0"/>
    <cv index="188" value="0"/>
    <cv index="189" value="0"/>
    <cv index="190" value="0"/>
    <cv index="191" value="0"/>
    <cv index="192" value="0"/>
    <cv index="193" value="0"/>
    <cv index="194" value="0"/>
    <cv index="195" value="0"/>
    <cv index="196" value="0"/>
    <cv index="197" value="0"/>
    <cv index="198" value="0"/>
    <cv index="199" value="0"/>
    <cv index="200" value="610"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="A" xMin="49" yMin="12" xMax="754" yMax="766">
      <contour>
        <pt x="49" y="12" on="1"/>
        <pt x="171" y="12" on="1"/>
        <pt x="171" y="85" on="1"/>
        <pt x="195" y="85" on="1"/>
        <pt x="195" y="134" on="1"/>
        <pt x="219" y="134" on="1"/>
        <pt x="219" y="183" on="1"/>
        <pt x="584" y="183" on="1"/>
        <pt x="584" y="134" on="1"/>
        <pt x="608" y="134" on="1"/>
        <pt x="608" y="85" on="1"/>
        <pt x="632" y="85" on="1"/>
        <pt x="632" y="12" on="1"/>
        <pt x="754" y="12" on="1"/>
        <pt x="754" y="37" on="1"/>
        <pt x="730" y="37" on="1"/>
        <pt x="730" y="110" on="1"/>
        <pt x="705" y="110" on="1"/>
        <pt x="705" y="158" on="1"/>
        <pt x="681" y="158" on="1"/>
        <pt x="681" y="231" on="1"/>
        <pt x="657" y="231" on="1"/>
        <pt x="657" y="280" on="1"/>
        <pt x="632" y="280" on="1"/>
        <pt x="632" y="353" on="1"/>
        <pt x="608" y="353" on="1"/>
        <pt x="608" y="401" on="1"/>
        <pt x="584" y="401" on="1"/>
        <pt x="584" y="474" on="1"/>
        <pt x="560" y="474" on="1"/>
        <pt x="560" y="523" on="1"/>
        <pt x="535" y="523" on="1"/>
        <pt x="535" y="596" on="1"/>
        <pt x="511" y="596" on="1"/>
        <pt x="511" y="645" on="1"/>
        <pt x="487" y="645" on="1"/>
        <pt x="487" y="693" on="1"/>
        <pt x="462" y="693" on="1"/>
        <pt x="462" y="766" on="1"/>
        <pt x="341" y="766" on="1"/>
        <pt x="341" y="693" on="1"/>
        <pt x="316" y="693" on="1"/>
        <pt x="316" y="645" on="1"/>
        <pt x="292" y="645" on="1"/>
        <pt x="292" y="572" on="1"/>
        <pt x="268" y="572" on="1"/>
        <pt x="268" y="523" on="1"/>
        <pt x="244" y="523" on="1"/>
        <pt x="244" y="450" on="1"/>
        <pt x="219" y="450" on="1"/>
        <pt x="219" y="401" on="1"/>
        <pt x="195" y="401" on="1"/>
        <pt x="195" y="353" on="1"/>
        <pt x="171" y="353" on="1"/>
        <pt x="171" y="280" on="1"/>
        <pt x="146" y="280" on="1"/>
        <pt x="146" y="231" on="1"/>
        <pt x="122" y="231" on="1"/>
        <pt x="122" y="158" on="1"/>
        <pt x="98" y="158" on="1"/>
        <pt x="98" y="110" on="1"/>
        <pt x="73" y="110" on="1"/>
        <pt x="73" y="37" on="1"/>
        <pt x="49" y="37" on="1"/>
      </contour>
      <contour>
        <pt x="268" y="329" on="1"/>
        <pt x="292" y="329" on="1"/>
        <pt x="292" y="377" on="1"/>
        <pt x="316" y="377" on="1"/>
        <pt x="316" y="450" on="1"/>
        <pt x="341" y="450" on="1"/>
        <pt x="341" y="499" on="1"/>
        <pt x="365" y="499" on="1"/>
        <pt x="365" y="572" on="1"/>
        <pt x="389" y="572" on="1"/>
        <pt x="389" y="620" on="1"/>
        <pt x="414" y="620" on="1"/>
        <pt x="414" y="572" on="1"/>
        <pt x="438" y="572" on="1"/>
        <pt x="438" y="499" on="1"/>
        <pt x="462" y="499" on="1"/>
        <pt x="462" y="450" on="1"/>
        <pt x="487" y="450" on="1"/>
        <pt x="487" y="377" on="1"/>
        <pt x="511" y="377" on="1"/>
        <pt x="511" y="329" on="1"/>
        <pt x="535" y="329" on="1"/>
        <pt x="535" y="280" on="1"/>
        <pt x="268" y="280" on="1"/>
      </contour>
      <instructions/>
    </TTGlyph>

    <TTGlyph name="V" xMin="0" yMin="12" xMax="656" yMax="766">
      <contour>
        <pt x="0" y="742" on="1"/>
        <pt x="24" y="742" on="1"/>
        <pt x="24" y="669" on="1"/>
        <pt x="49" y="669" on="1"/>
        <pt x="49" y="596" on="1"/>
        <pt x="73" y="596" on="1"/>
        <pt x="73" y="547" on="1"/>
        <pt x="97" y="547" on="1"/>
        <pt x="97" y="474" on="1"/>
        <pt x="122" y="474" on="1"/>
        <pt x="122" y="401" on="1"/>
        <pt x="146" y="401" on="1"/>
        <pt x="146" y="353" on="1"/>
        <pt x="170" y="353" on="1"/>
        <pt x="170" y="280" on="1"/>
        <pt x="194" y="280" on="1"/>
        <pt x="194" y="207" on="1"/>
        <pt x="219" y="207" on="1"/>
        <pt x="219" y="134" on="1"/>
        <pt x="243" y="134" on="1"/>
        <pt x="243" y="85" on="1"/>
        <pt x="267" y="85" on="1"/>
        <pt x="267" y="12" on="1"/>
        <pt x="389" y="12" on="1"/>
        <pt x="389" y="85" on="1"/>
        <pt x="413" y="85" on="1"/>
        <pt x="413" y="158" on="1"/>
        <pt x="438" y="158" on="1"/>
        <pt x="438" y="207" on="1"/>
        <pt x="462" y="207" on="1"/>
        <pt x="462" y="280" on="1"/>
        <pt x="486" y="280" on="1"/>
        <pt x="486" y="353" on="1"/>
        <pt x="511" y="353" on="1"/>
        <pt x="511" y="401" on="1"/>
        <pt x="535" y="401" on="1"/>
        <pt x="535" y="474" on="1"/>
        <pt x="559" y="474" on="1"/>
        <pt x="559" y="547" on="1"/>
        <pt x="584" y="547" on="1"/>
        <pt x="584" y="596" on="1"/>
        <pt x="608" y="596" on="1"/>
        <pt x="608" y="669" on="1"/>
        <pt x="632" y="669" on="1"/>
        <pt x="632" y="742" on="1"/>
        <pt x="656" y="742" on="1"/>
        <pt x="656" y="766" on="1"/>
        <pt x="559" y="766" on="1"/>
        <pt x="559" y="742" on="1"/>
        <pt x="535" y="742" on="1"/>
        <pt x="535" y="693" on="1"/>
        <pt x="511" y="693" on="1"/>
        <pt x="511" y="620" on="1"/>
        <pt x="486" y="620" on="1"/>
        <pt x="486" y="547" on="1"/>
        <pt x="462" y="547" on="1"/>
        <pt x="462" y="499" on="1"/>
        <pt x="438" y="499" on="1"/>
        <pt x="438" y="426" on="1"/>
        <pt x="413" y="426" on="1"/>
        <pt x="413" y="353" on="1"/>
        <pt x="389" y="353" on="1"/>
        <pt x="389" y="280" on="1"/>
        <pt x="365" y="280" on="1"/>
        <pt x="365" y="231" on="1"/>
        <pt x="340" y="231" on="1"/>
        <pt x="340" y="158" on="1"/>
        <pt x="316" y="158" on="1"/>
        <pt x="316" y="231" on="1"/>
        <pt x="292" y="231" on="1"/>
        <pt x="292" y="280" on="1"/>
        <pt x="267" y="280" on="1"/>
        <pt x="267" y="353" on="1"/>
        <pt x="243" y="353" on="1"/>
        <pt x="243" y="426" on="1"/>
        <pt x="219" y="426" on="1"/>
        <pt x="219" y="499" on="1"/>
        <pt x="194" y="499" on="1"/>
        <pt x="194" y="547" on="1"/>
        <pt x="170" y="547" on="1"/>
        <pt x="170" y="620" on="1"/>
        <pt x="146" y="620" on="1"/>
        <pt x="146" y="693" on="1"/>
        <pt x="122" y="693" on="1"/>
        <pt x="122" y="766" on="1"/>
        <pt x="0" y="766" on="1"/>
      </contour>
      <instructions/>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      instance
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      0.000;NONE;raster Pixel
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      instance Regular
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 0.001
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      instance-Regular
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-75"/>
    <underlineThickness value="50"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <GDEF>
    <Version value="0x00010000"/>
    <GlyphClassDef>
      <ClassDef glyph="A" class="1"/>
    </GlyphClassDef>
  </GDEF>

  <GPOS>
    <Version value="0x00010000"/>
    <ScriptList>
      <!-- ScriptCount=1 -->
      <ScriptRecord index="0">
        <ScriptTag value="DFLT"/>
        <Script>
          <DefaultLangSys>
            <ReqFeatureIndex value="65535"/>
            <!-- FeatureCount=1 -->
            <FeatureIndex index="0" value="0"/>
          </DefaultLangSys>
          <!-- LangSysCount=0 -->
        </Script>
      </ScriptRecord>
    </ScriptList>
    <FeatureList>
      <!-- FeatureCount=1 -->
      <FeatureRecord index="0">
        <FeatureTag value="kern"/>
        <Feature>
          <!-- LookupCount=1 -->
          <LookupListIndex index="0" value="0"/>
        </Feature>
      </FeatureRecord>
    </FeatureList>
    <LookupList>
      <!-- LookupCount=1 -->
      <Lookup index="0">
        <LookupType value="2"/>
        <LookupFlag value="8"/><!-- ignoreMarks -->
        <!-- SubTableCount=2 -->
        <PairPos index="0" Format="1">
          <Coverage>
            <Glyph value="A"/>
            <Glyph value="V"/>
          </Coverage>
          <ValueFormat1 value="4"/>
          <ValueFormat2 value="0"/>
          <!-- PairSetCount=2 -->
          <PairSet index="0">
            <!-- PairValueCount=1 -->
            <PairValueRecord index="0">
              <SecondGlyph value="V"/>
              <Value1 XAdvance="-72"/>
            </PairValueRecord>
          </PairSet>
          <PairSet index="1">
            <!-- PairValueCount=1 -->
            <PairValueRecord index="0">
              <SecondGlyph value="A"/>
              <Value1 XAdvance="-72"/>
            </PairValueRecord>
          </PairSet>
        </PairPos>
        <PairPos index="1" Format="2">
          <Coverage>
            <Glyph value="A"/>
          </Coverage>
          <ValueFormat1 value="4"/>
          <ValueFormat2 value="0"/>
          <ClassDef1>
          </ClassDef1>
          <ClassDef2>
            <ClassDef glyph="A" class="1"/>
          </ClassDef2>
          <!-- Class1Count=1 -->
          <!-- Class2Count=2 -->
          <Class1Record index="0">
            <Class2Record index="0">
              <Value1 XAdvance="0"/>
            </Class2Record>
            <Class2Record index="1">
              <Value1 XAdvance="0"/>
            </Class2Record>
          </Class1Record>
        </PairPos>
      </Lookup>
    </LookupList>
  </GPOS>

</ttFont>
